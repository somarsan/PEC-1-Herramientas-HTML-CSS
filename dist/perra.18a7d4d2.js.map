{"mappings":"o8FAYMA,YAAN,SAAQC,0BAAFD,EAAWC,sBAAXD,YAAAA,gCAAAA,+CAAAA,EAAW,EACbE,IAAA,0BAAA,sBACIC,KAAKC,QAAUD,KAAKE,aAAa,WAEjC,IAAIC,EAAYH,KAAKI,cAAc,gBA4BnC,GA1BAJ,KAAKK,UAAaF,GAAaA,EAAUG,YAAYC,QAAWP,KAAKE,aAAa,cAAgB,OAW7FF,KAAKQ,MAAMC,kBACdT,KAAKU,UAAa,0BAAsCC,OAAbX,KAAKC,QAAQ,kBAExDJ,EAAYe,YAAY,UAAWZ,KAAKU,UAAW,SAEnDV,KAAKQ,MAAMC,gBAAmB,QAAsBE,OAAfX,KAAKU,UAAU,OAIjDP,KACDA,EAAYU,SAASC,cAAc,WACzBC,KAAO,SACjBZ,EAAUa,UAAUC,IAAI,eACxBjB,KAAKkB,OAAOf,KAEXA,EAAUG,YAAa,CACxB,IAAMa,EAAiBN,SAASC,cAAc,QAC9CK,EAAeC,UAAY,sBAC3BD,EAAeb,YAAcN,KAAKK,UAClCF,EAAUe,OAAOC,GAIrBnB,KAAKqB,iBAAiB,cAAexB,EAAYyB,gBAAiB,CAACC,MAAM,IAKzEvB,KAAKqB,iBAAiB,SAAS,SAAAG,GAAK,OAAMC,EAADC,kBA4C7C3B,IAAA,kBAAA,WACI,IAAM4B,EAAS,IAAIC,gBAAgB5B,KAAKE,aAAa,WAAa,IAClEyB,EAAOT,OAAO,WAAY,KAE1B,IAAMW,EAAWhB,SAASC,cAAc,UACxCe,EAASC,MAAQ,IACjBD,EAASE,OAAS,IAElBF,EAASG,MAAQhC,KAAKK,UACtBwB,EAASI,MAAQ,0EACjBJ,EAASK,iBAAkB,EAG3BL,EAASM,IAAO,0CAA6ExB,OAApCyB,mBAAmBpC,KAAKC,SAAS,KAAqBU,OAAlBgB,EAAOU,YACpGrC,KAAKkB,OAAOW,GAEZ7B,KAAKgB,UAAUC,IAAI,iBAGnBjB,KAAKI,cAAc,UAAUkC,aArD1BvC,IAAA,oBAAP,SAAmBwC,EAAMC,EAAKC,GAC1B,IAAMC,EAAS7B,SAASC,cAAc,QACtC4B,EAAOC,IAAMJ,EACbG,EAAOE,KAAOJ,EACVC,IACAC,EAAOD,GAAKA,GAEhB5B,SAASgC,KAAK3B,OAAOwB,MAYlB3C,IAAA,wBAAP,WACQF,EAAYiD,eAGhBjD,EAAYe,YAAY,aAAc,oCAEtCf,EAAYe,YAAY,aAAc,0BAGtCf,EAAYe,YAAY,aAAc,uCACtCf,EAAYe,YAAY,aAAc,kCAEtCf,EAAYiD,cAAe,OAtF7BjD,EAAN,kBAA0BC,cAgH1BiD,eAAeC,OAAO,eAAgBnD","sources":["node_modules/lite-youtube-embed/src/lite-yt-embed.js"],"sourcesContent":["/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute('videoid');\n\n        let playBtnEl = this.querySelector('.lty-playbtn');\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\n\n        /**\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         *\n         * TODO: Do the sddefault->hqdefault fallback\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\n         * TODO: Consider using webp if supported, falling back to jpg\n         */\n        if (!this.style.backgroundImage) {\n          this.posterUrl = `https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg`;\n          // Warm the connection for the poster image\n          LiteYTEmbed.addPrefetch('preload', this.posterUrl, 'image');\n\n          this.style.backgroundImage = `url(\"${this.posterUrl}\")`;\n        }\n\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement('button');\n            playBtnEl.type = 'button';\n            playBtnEl.classList.add('lty-playbtn');\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement('span');\n            playBtnLabelEl.className = 'lyt-visually-hidden';\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener('click', e => this.addIframe());\n    }\n\n    // // TODO: Support the the user changing the [videoid] attribute\n    // attributeChangedCallback() {\n    // }\n\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */\n    static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement('link');\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) {\n            linkEl.as = as;\n        }\n        document.head.append(linkEl);\n    }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n\n        LiteYTEmbed.preconnected = true;\n    }\n\n    addIframe() {\n        const params = new URLSearchParams(this.getAttribute('params') || []);\n        params.append('autoplay', '1');\n\n        const iframeEl = document.createElement('iframe');\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\n        this.append(iframeEl);\n\n        this.classList.add('lyt-activated');\n\n        // Set focus for a11y\n        this.querySelector('iframe').focus();\n    }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n"],"names":["LiteYTEmbed","HTMLElement","key","this","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","style","backgroundImage","posterUrl","concat","addPrefetch","document","createElement","type","classList","add","append","playBtnLabelEl","className","addEventListener","warmConnections","once","e","_this","addIframe","params","URLSearchParams","iframeEl","width","height","title","allow","allowFullscreen","src","encodeURIComponent","toString","focus","kind","url","as","linkEl","rel","href","head","preconnected","customElements","define"],"version":3,"file":"perra.18a7d4d2.js.map"}